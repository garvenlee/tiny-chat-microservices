# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import push_pb2 as push__pb2


class PushStub(object):
    """TODO how to design the publish resp?
    1.when data enters PushService, then responds
    2.when data is forwarded to gateway, then responds
    3.when dats is pushed to user, then responds
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.SubscribeStream = channel.stream_stream(
            "/services.push.Push/SubscribeStream",
            request_serializer=push__pb2.ConsumerFeedback.SerializeToString,
            response_deserializer=push__pb2.PubEventToGateway.FromString,
        )
        self.PublishNotification = channel.unary_unary(
            "/services.push.Push/PublishNotification",
            request_serializer=push__pb2.PubNotification.SerializeToString,
            response_deserializer=push__pb2.PubNotificationAck.FromString,
        )
        self.ControlMessage = channel.unary_unary(
            "/services.push.Push/ControlMessage",
            request_serializer=push__pb2.ControlMessageData.SerializeToString,
            response_deserializer=push__pb2.ControlMessageAck.FromString,
        )


class PushServicer(object):
    """TODO how to design the publish resp?
    1.when data enters PushService, then responds
    2.when data is forwarded to gateway, then responds
    3.when dats is pushed to user, then responds
    """

    def SubscribeStream(self, request_iterator, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def PublishNotification(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ControlMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_PushServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "SubscribeStream": grpc.stream_stream_rpc_method_handler(
            servicer.SubscribeStream,
            request_deserializer=push__pb2.ConsumerFeedback.FromString,
            response_serializer=push__pb2.PubEventToGateway.SerializeToString,
        ),
        "PublishNotification": grpc.unary_unary_rpc_method_handler(
            servicer.PublishNotification,
            request_deserializer=push__pb2.PubNotification.FromString,
            response_serializer=push__pb2.PubNotificationAck.SerializeToString,
        ),
        "ControlMessage": grpc.unary_unary_rpc_method_handler(
            servicer.ControlMessage,
            request_deserializer=push__pb2.ControlMessageData.FromString,
            response_serializer=push__pb2.ControlMessageAck.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "services.push.Push", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class Push(object):
    """TODO how to design the publish resp?
    1.when data enters PushService, then responds
    2.when data is forwarded to gateway, then responds
    3.when dats is pushed to user, then responds
    """

    @staticmethod
    def SubscribeStream(
        request_iterator,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.stream_stream(
            request_iterator,
            target,
            "/services.push.Push/SubscribeStream",
            push__pb2.ConsumerFeedback.SerializeToString,
            push__pb2.PubEventToGateway.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def PublishNotification(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/services.push.Push/PublishNotification",
            push__pb2.PubNotification.SerializeToString,
            push__pb2.PubNotificationAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def ControlMessage(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/services.push.Push/ControlMessage",
            push__pb2.ControlMessageData.SerializeToString,
            push__pb2.ControlMessageAck.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

syntax = "proto3";

service RedisCache {
  rpc RedisGet(UnaryGetCommonRequest) returns (UnaryGetCommonResp) {}
  rpc RedisSet(UnarySetCommonRequest) returns (UnarySetCommonResp) {}
  rpc RedisMGet(MultiGetCommonRequest) returns (MultiGetCommonResp) {}
  rpc RedisMSet(MultiSetCommonRequest) returns (MultiSetCommonResp) {}

  rpc RedisLPush(RedisListPushRequest) returns (RedisListPushResp) {}
  rpc RedisRPush(RedisListPushRequest) returns (RedisListPushResp) {}

  rpc RedisHLen(UnaryGetCommonResp) returns (UnaryGetCommonResp) {}
  rpc RedisHGet(RedisHGetRequest) returns (RedisHGetResp) {}
  rpc RedisHSet(RedisHSetRequest) returns (RedisHSetResp) {}
  rpc RedisHDel(RedisHDelRequest) returns (RedisHDelResp) {}
  rpc RedisHGetAll(RedisHGetRequest) returns (RedisHGetAllResp) {}

  rpc RedisDelete(RedisDeleteRequest) returns (RedisDeleteResp) {}

  rpc RedisRateLimiter(RedisRateLimiterRequest) returns (RedisRateLimiterResp) {
  }
}

enum RedisOpStatus {
  REDIS_SUCCESS = 0;
  REDIS_FAILED = 1;
  REDIS_TIMEOUT = 2;
}

message UnaryGetCommonRequest { string key = 1; }

message UnaryGetCommonResp {
  RedisOpStatus status = 1;
  optional string err_msg = 2;
  string value = 3;
}

message UnarySetCommonRequest {
  string key = 1;
  string value = 2;
}

message UnarySetCommonResp {
  RedisOpStatus status = 1;
  optional string err_msg = 2;
}

message MultiGetCommonRequest { repeated string keys = 1; }

message MultiGetCommonResp {
  RedisOpStatus status = 1;
  optional string err_msg = 2;
  repeated string values = 3;
}

message MultiSetCommonRequest {
  repeated string keys = 1;
  repeated string values = 2;
}

message MultiSetCommonResp {
  RedisOpStatus status = 1;
  optional string err_msg = 2;
}

message RedisListPushRequest {
  string key = 1;
  repeated string values = 2;
}

message RedisListPushResp {
  RedisOpStatus status = 1;
  optional string err_msg = 2;
}

message RedisHGetRequest {
  string key = 1;
  string field = 2;
}

message RedisHGetResp {
  RedisOpStatus status = 1;
  optional string err_msg = 2;
  string value = 3;
}

message RedisHSetRequest {
  string key = 1;
  string field = 2;
  string value = 3;
}

message RedisHSetResp { RedisOpStatus status = 1; }

message RedisHDelRequest {
  string key = 1;
  repeated string fields = 2;
}

message RedisHDelResp { RedisOpStatus status = 1; }

message RedisHGetAllRequest { string key = 1; }

message RedisHGetAllResp {
  RedisOpStatus status = 1;
  optional string err_msg = 2;
  repeated string keys = 3;
  repeated string values = 4;
}

message RedisDeleteRequest { string key = 1; }

message RedisDeleteResp {
  RedisOpStatus status = 1;
  optional string err_msg = 2;
}

enum RateType {
  IP = 0;
  TOKEN = 1;
}

enum RateCode {
  RATE_ALLOWED = 0;
  RATE_REJECTED = 1;
  RATE_BLOCKED = 2;
}

message RedisRateLimiterRequest {
  RateType tp = 1;
  repeated string keys = 2;
  repeated string argv = 3;
}

message RedisRateLimiterResp {
  RedisOpStatus status = 1;
  RateCode code = 2;
}
# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import auth_user_pb2 as auth__user__pb2


class AuthUserStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.AuthLogin = channel.unary_unary(
            "/services.auth.AuthUser/AuthLogin",
            request_serializer=auth__user__pb2.AuthLoginRequest.SerializeToString,
            response_deserializer=auth__user__pb2.AuthLoginReply.FromString,
        )
        self.AuthLogout = channel.unary_unary(
            "/services.auth.AuthUser/AuthLogout",
            request_serializer=auth__user__pb2.AuthLogoutRequest.SerializeToString,
            response_deserializer=auth__user__pb2.AuthLogoutReply.FromString,
        )
        self.AuthRegister = channel.unary_unary(
            "/services.auth.AuthUser/AuthRegister",
            request_serializer=auth__user__pb2.AuthRegisterRequest.SerializeToString,
            response_deserializer=auth__user__pb2.AuthRegisterReply.FromString,
        )
        self.AuthRegisterConfirm = channel.unary_unary(
            "/services.auth.AuthUser/AuthRegisterConfirm",
            request_serializer=auth__user__pb2.AuthRegisterConfirmRequest.SerializeToString,
            response_deserializer=auth__user__pb2.AuthRegisterConfirmReply.FromString,
        )
        self.AuthToken = channel.unary_unary(
            "/services.auth.AuthUser/AuthToken",
            request_serializer=auth__user__pb2.AuthTokenRequest.SerializeToString,
            response_deserializer=auth__user__pb2.AuthTokenReply.FromString,
        )
        self.AuthRefresh = channel.unary_unary(
            "/services.auth.AuthUser/AuthRefresh",
            request_serializer=auth__user__pb2.AuthRefreshTokenRequest.SerializeToString,
            response_deserializer=auth__user__pb2.AuthRefreshTokenReply.FromString,
        )


class AuthUserServicer(object):
    """Missing associated documentation comment in .proto file."""

    def AuthLogin(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AuthLogout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AuthRegister(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AuthRegisterConfirm(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AuthToken(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def AuthRefresh(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_AuthUserServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "AuthLogin": grpc.unary_unary_rpc_method_handler(
            servicer.AuthLogin,
            request_deserializer=auth__user__pb2.AuthLoginRequest.FromString,
            response_serializer=auth__user__pb2.AuthLoginReply.SerializeToString,
        ),
        "AuthLogout": grpc.unary_unary_rpc_method_handler(
            servicer.AuthLogout,
            request_deserializer=auth__user__pb2.AuthLogoutRequest.FromString,
            response_serializer=auth__user__pb2.AuthLogoutReply.SerializeToString,
        ),
        "AuthRegister": grpc.unary_unary_rpc_method_handler(
            servicer.AuthRegister,
            request_deserializer=auth__user__pb2.AuthRegisterRequest.FromString,
            response_serializer=auth__user__pb2.AuthRegisterReply.SerializeToString,
        ),
        "AuthRegisterConfirm": grpc.unary_unary_rpc_method_handler(
            servicer.AuthRegisterConfirm,
            request_deserializer=auth__user__pb2.AuthRegisterConfirmRequest.FromString,
            response_serializer=auth__user__pb2.AuthRegisterConfirmReply.SerializeToString,
        ),
        "AuthToken": grpc.unary_unary_rpc_method_handler(
            servicer.AuthToken,
            request_deserializer=auth__user__pb2.AuthTokenRequest.FromString,
            response_serializer=auth__user__pb2.AuthTokenReply.SerializeToString,
        ),
        "AuthRefresh": grpc.unary_unary_rpc_method_handler(
            servicer.AuthRefresh,
            request_deserializer=auth__user__pb2.AuthRefreshTokenRequest.FromString,
            response_serializer=auth__user__pb2.AuthRefreshTokenReply.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "services.auth.AuthUser", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))


# This class is part of an EXPERIMENTAL API.
class AuthUser(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def AuthLogin(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/services.auth.AuthUser/AuthLogin",
            auth__user__pb2.AuthLoginRequest.SerializeToString,
            auth__user__pb2.AuthLoginReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AuthLogout(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/services.auth.AuthUser/AuthLogout",
            auth__user__pb2.AuthLogoutRequest.SerializeToString,
            auth__user__pb2.AuthLogoutReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AuthRegister(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/services.auth.AuthUser/AuthRegister",
            auth__user__pb2.AuthRegisterRequest.SerializeToString,
            auth__user__pb2.AuthRegisterReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AuthRegisterConfirm(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/services.auth.AuthUser/AuthRegisterConfirm",
            auth__user__pb2.AuthRegisterConfirmRequest.SerializeToString,
            auth__user__pb2.AuthRegisterConfirmReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AuthToken(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/services.auth.AuthUser/AuthToken",
            auth__user__pb2.AuthTokenRequest.SerializeToString,
            auth__user__pb2.AuthTokenReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )

    @staticmethod
    def AuthRefresh(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/services.auth.AuthUser/AuthRefresh",
            auth__user__pb2.AuthRefreshTokenRequest.SerializeToString,
            auth__user__pb2.AuthRefreshTokenReply.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
        )
